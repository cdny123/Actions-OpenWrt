name: OpenWrt Compile

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ARCHITECTURE: [x86_64]
        REPO_BRANCH: [istoreos-22.03]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Prepare Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        
    - name: Checkout OpenWrt
      run: |
        git clone https://github.com/openwrt/openwrt.git
        cd openwrt
        git checkout ${{ matrix.REPO_BRANCH }}
        
    - name: Configure
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make defconfig
        
    - name: Compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 || make -j1 V=s
        
    - name: 清理编译缓存
      run: |
        cd openwrt/bin/targets/${{ matrix.ARCHITECTURE }}/${{ matrix.REPO_BRANCH }}
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
      shell: /usr/bin/bash -e {0}
      env:
        REPO_URL: https://github.com/istoreos/istoreos
        FEEDS_CONF: feeds.conf
        CONFIG_FILE: .config
        DIY_P1_SH: diy-part1.sh
        DIY_P2_SH: diy-part2.sh
        UPLOAD_BIN_DIR: true
        UPLOAD_FIRMWARE: true
        UPLOAD_RELEASE: true
        TZ: Asia/Shanghai
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: openwrt-${{ matrix.ARCHITECTURE }}-${{ matrix.REPO_BRANCH }}
        path: ${{ env.FIRMWARE }}
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.FIRMWARE }}/*
        asset_name: ${{ matrix.ARCHITECTURE }}-${{ matrix.REPO_BRANCH }}.bin
        asset_content_type: application/octet-stream
